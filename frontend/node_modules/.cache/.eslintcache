[{"/home/hanif/projects/robot-market-gitlab/frontend/src/index.js":"1","/home/hanif/projects/robot-market-gitlab/frontend/src/App.js":"2","/home/hanif/projects/robot-market-gitlab/frontend/src/redux/store.js":"3","/home/hanif/projects/robot-market-gitlab/frontend/src/views/Home.jsx":"4","/home/hanif/projects/robot-market-gitlab/frontend/src/components/unit/Robot.jsx":"5","/home/hanif/projects/robot-market-gitlab/frontend/src/features/robots/RobotsReducer.js":"6","/home/hanif/projects/robot-market-gitlab/frontend/src/features/CartReducer.js":"7","/home/hanif/projects/robot-market-gitlab/frontend/src/components/groups/RobotGrid.jsx":"8","/home/hanif/projects/robot-market-gitlab/frontend/src/components/blocks/RobotsSection.jsx":"9","/home/hanif/projects/robot-market-gitlab/frontend/src/components/blocks/CartBlock.jsx":"10","/home/hanif/projects/robot-market-gitlab/frontend/src/components/groups/CartBox.jsx":"11","/home/hanif/projects/robot-market-gitlab/frontend/src/components/unit/Cartitem.jsx":"12","/home/hanif/projects/robot-market-gitlab/frontend/src/components/unit/Filter.jsx":"13"},{"size":352,"mtime":1616003707276,"results":"14","hashOfConfig":"15"},{"size":178,"mtime":1615449419268,"results":"16","hashOfConfig":"15"},{"size":256,"mtime":1615463404904,"results":"17","hashOfConfig":"15"},{"size":806,"mtime":1616003793484,"results":"18","hashOfConfig":"15"},{"size":2593,"mtime":1616041173565,"results":"19","hashOfConfig":"15"},{"size":523,"mtime":1615974889757,"results":"20","hashOfConfig":"15"},{"size":1358,"mtime":1615969676788,"results":"21","hashOfConfig":"15"},{"size":1029,"mtime":1616038566801,"results":"22","hashOfConfig":"15"},{"size":151,"mtime":1615780473876,"results":"23","hashOfConfig":"15"},{"size":1161,"mtime":1616040406316,"results":"24","hashOfConfig":"15"},{"size":515,"mtime":1616041120739,"results":"25","hashOfConfig":"15"},{"size":1280,"mtime":1616040911523,"results":"26","hashOfConfig":"15"},{"size":949,"mtime":1616039549948,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"12fyuur",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/home/hanif/projects/robot-market-gitlab/frontend/src/index.js",[],["60","61"],"/home/hanif/projects/robot-market-gitlab/frontend/src/App.js",[],"/home/hanif/projects/robot-market-gitlab/frontend/src/redux/store.js",[],"/home/hanif/projects/robot-market-gitlab/frontend/src/views/Home.jsx",[],"/home/hanif/projects/robot-market-gitlab/frontend/src/components/unit/Robot.jsx",["62"],"import React from \"react\";\n\nimport { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as moment from \"moment\";\n\nimport { addToCart, removeFromCart } from \"../../features/CartReducer\";\nvar _ = require(\"lodash\");\n\nexport default function Robot(props) {\n  const dispatch = useDispatch();\n  const { id, robot } = props;\n  const all_robots = useSelector((state) => state.products.robots);\n  const subscribedRobots = useSelector((state) => state.cart.cartItems);\n\n  function subscribeCart(item) {\n    if (robot.stock !== 0) {\n      let cartItem = _.find(all_robots, { name: item });\n      // let setSub\n      // check to see if item is in cart already\n      if (_.find(subscribedRobots, { name: item })) {\n      } else {\n        // console.log(cartItem);\n        dispatch(addToCart(cartItem));\n      }\n    }\n  }\n  function unSubscribeCart(item) {\n    if (robot.stock !== 0) {\n      let cartItem = _.find(all_robots, { name: item });\n\n      dispatch(removeFromCart(cartItem));\n    }\n  }\n  useEffect(() => {\n    // addedStatus;\n  });\n  return (\n    <div className=\"col-md-6 col-lg-4 col-xxl-3 mb-3\" id={id}>\n      <div className={\"card \" + (robot.stock > 0 ? \"\" : \"out-stocked\")}>\n        <figure className=\"pt-3\">\n          <img src={robot.image} alt={\"image-\" + robot.name.toLowerCase()} />\n          <b className=\"material\">{robot.material}</b>\n        </figure>\n        <p className=\"py-2 mb-0 card-mid d-flex justify-content-between px-3\">\n          <b className=\"price\">\n            <b className=\"mx-2\">฿</b>\n            {robot.price}\n          </b>\n          <b className=\"stock\">\n            <b className=\"mx-2\">Stock:</b>\n            {robot.stock}\n          </b>\n        </p>\n        <div className=\"card-body\">\n          <div>\n            <p className=\"card-title\">{robot.name}</p>\n            <p className=\"date\">\n              {moment(robot.createdAt).format(\"DD-MM-YYYY\")}\n            </p>\n          </div>\n          <button\n            className={\n              \"btn \" +\n              (robot.stock > 0 ? \"btn-info\" : \"btn-warning\") +\n              (_.find(subscribedRobots, robot) ? \" btn-primary\" : \"\")\n            }\n            onClick={() =>\n              _.find(subscribedRobots, robot)\n                ? unSubscribeCart(robot.name)\n                : subscribeCart(robot.name)\n            }\n          >\n            {robot.stock > 0\n              ? _.find(subscribedRobots, robot)\n                ? \"Remove\"\n                : \"Add\"\n              : \"Out of Stock\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/hanif/projects/robot-market-gitlab/frontend/src/features/robots/RobotsReducer.js",[],"/home/hanif/projects/robot-market-gitlab/frontend/src/features/CartReducer.js",[],"/home/hanif/projects/robot-market-gitlab/frontend/src/components/groups/RobotGrid.jsx",["63"],"import React from \"react\";\nimport Robot from \"../unit/Robot\";\nimport { useSelector } from \"react-redux\";\nimport Filter from \"../unit/Filter\";\nimport { filter } from \"lodash\";\n\nexport default function RobotGrid() {\n  // function addToCart(robot) {\n  //   console.log(\"add cart event\");\n  // }\n  const all_robots = useSelector((state) => state.products.robots);\n  const filterOption = useSelector((state) => state.products.filterby);\n  const filteredRoots =\n    filterOption === \"\"\n      ? all_robots\n      : all_robots.filter(function (item) {\n          return item.material === filterOption;\n        });\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <div className=\"filter-header\">\n          <b>Items for you</b>\n          <Filter></Filter>\n        </div>\n      </div>\n\n      {!all_robots\n        ? \"Loading...\"\n        : filteredRoots.map((item) => <Robot robot={item} key={item.name} />)}\n      {/* {all_robots.map((item) => (\n        <Robot robot={item}></Robot>\n      ))} */}\n    </div>\n  );\n}\n","/home/hanif/projects/robot-market-gitlab/frontend/src/components/blocks/RobotsSection.jsx",[],"/home/hanif/projects/robot-market-gitlab/frontend/src/components/blocks/CartBlock.jsx",["64"],"import React from \"react\";\nimport CartBox from \"../groups/CartBox\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport default function CartBlock() {\n  const subscribedRobots = useSelector((state) => state.cart.cartItems);\n  const totalRobots =\n    subscribedRobots.length > 0\n      ? subscribedRobots.reduce((sum, item) => {\n          return parseInt(sum) + parseInt(item.count);\n        }, 0)\n      : 0;\n\n  const totalPrice =\n    subscribedRobots.length > 0\n      ? subscribedRobots.reduce((sum, item) => {\n          return (\n            parseFloat(sum) + parseFloat(item.count) * parseFloat(item.price)\n          );\n        }, 0)\n      : 0;\n\n  return (\n    <div className=\"page-right\">\n      <div className=\"cart-header\">\n        <p className=\"cart-header-title\">Shopping Bag</p>\n        {totalRobots > 0 ? <p>({totalRobots} items)</p> : \"\"}\n      </div>\n      <CartBox></CartBox>\n      {totalRobots > 0 ? (\n        <p className=\"final\">\n          <b className=\"mr-3\">Sub total:</b>{\" \"}\n          <span>\n            <b>฿</b>\n            {totalPrice.toFixed(2)}\n          </span>\n        </p>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n","/home/hanif/projects/robot-market-gitlab/frontend/src/components/groups/CartBox.jsx",["65"],"import React from \"react\";\nimport CartItem from \"../unit/Cartitem\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport default function CartBox() {\n  const cartItems = useSelector((state) => state.cart.cartItems);\n  if (cartItems.length > 0) {\n    return cartItems.map((item) => (\n      <CartItem item={item} key={item.name}></CartItem>\n    ));\n  } else {\n    return (\n      <p className=\"text-center\" style={{ fontSize: \"1.2rem\", color: \"grey\" }}>\n        No items in the cart\n      </p>\n    );\n  }\n}\n","/home/hanif/projects/robot-market-gitlab/frontend/src/components/unit/Cartitem.jsx",["66","67"],"import React, { useState } from \"react\";\n// import { robotSlice } from \"../../features/robots/RobotsReducer\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  removeFromCart,\n  incrementCartItem,\n  decrementCartItem,\n} from \"../../features/CartReducer\";\n\nexport default function CartItem(props) {\n  const { item } = props;\n  const dispatch = useDispatch();\n\n  function addCount(item) {\n    if (item.stock > item.count && item.count < 5) {\n      dispatch(incrementCartItem(item));\n    } else {\n      alert(\"Max items reached\");\n    }\n  }\n\n  function removeCount(item) {\n    if (item.count !== 1) {\n      dispatch(decrementCartItem(item));\n    } else {\n      dispatch(removeFromCart(item));\n    }\n  }\n  return (\n    <div className=\"cart-item d-flex\">\n      <div className=\"cart-left\">\n        <img src={item.image} alt={\"image-\" + item.name} />\n      </div>\n      <div className=\"cart-right\">\n        <p className=\"cart-name\">{item.name}</p>\n        <div className=\"cart-control\">\n          <button onClick={() => addCount(item)}>+</button>\n          <span className=\"cart-times\">{item.count} x</span>\n          <button onClick={() => removeCount(item)}>-</button>\n        </div>\n      </div>\n      <p className=\"cart-price\">฿ {item.price}</p>\n    </div>\n  );\n}\n","/home/hanif/projects/robot-market-gitlab/frontend/src/components/unit/Filter.jsx",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":3,"column":21,"nodeType":"74","messageId":"75","endLine":3,"endColumn":29},{"ruleId":"72","severity":1,"message":"76","line":5,"column":10,"nodeType":"74","messageId":"75","endLine":5,"endColumn":16},{"ruleId":"72","severity":1,"message":"77","line":3,"column":23,"nodeType":"74","messageId":"75","endLine":3,"endColumn":34},{"ruleId":"72","severity":1,"message":"77","line":3,"column":23,"nodeType":"74","messageId":"75","endLine":3,"endColumn":34},{"ruleId":"72","severity":1,"message":"73","line":1,"column":17,"nodeType":"74","messageId":"75","endLine":1,"endColumn":25},{"ruleId":"72","severity":1,"message":"78","line":3,"column":10,"nodeType":"74","messageId":"75","endLine":3,"endColumn":21},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'filter' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","no-global-assign","no-unsafe-negation"]